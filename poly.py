"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my honor, Arnav Valvekar, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: av37493
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 3/24. If you choose to use
        # a dummy node, comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        if coeff == 0:
            return

        if self.head is None:
            self.head = Node(coeff, exp)
            return

        prev = None
        curr_node = self.head

        while curr_node:
            if curr_node.exp == exp:
                curr_node.coeff += coeff
                if curr_node.coeff == 0:
                    if prev:
                        prev.next = curr_node.next
                    else:
                        self.head = curr_node.next
                return

            if curr_node.exp < exp:
                new_node = Node(coeff, exp)
                if prev:
                    prev.next = new_node
                    new_node.next = curr_node
                else:
                    new_node.next = self.head
                    self.head = new_node
                return

            prev = curr_node
            curr_node = curr_node.next

        prev.next = Node(coeff, exp)

    # Add a polynomial p to the polynomial and return the resulting polynomial as a new linked list.
    def add(self, p):
        new_list = LinkedList()

        self_node = self.head
        p_node = p.head

        while self_node and p_node:
            if self_node.exp > p_node.exp:
                new_list.insert_term(self_node.coeff, self_node.exp)
                self_node = self_node.next
            elif self_node.exp < p_node.exp:
                new_list.insert_term(p_node.coeff, p_node.exp)
                p_node = p_node.next
            else:
                coeff_sum = self_node.coeff + p_node.coeff
                if coeff_sum != 0:
                    new_list.insert_term(coeff_sum, self_node.exp)
                self_node = self_node.next
                p_node = p_node.next

        while self_node is not None:
            new_list.insert_term(self_node.coeff, self_node.exp)
            self_node = self_node.next

        while p_node is not None:
            new_list.insert_term(p_node.coeff, p_node.exp)
            p_node = p_node.next

        return new_list

    # Multiply a polynomial p with the polynomial and return the product as a new linked list.
    def mult(self, p):
        first_list = LinkedList()

        self_node = self.head

        while self_node:
            p_node = p.head
            while p_node:
                first_list.insert_term(self_node.coeff * p_node.coeff, self_node.exp + p_node.exp)
                p_node = p_node.next
            self_node = self_node.next

        return first_list

    # Return a string representation of the polynomial.
    def __str__(self):
        if self.head is None:
            return ""
        
        terms = []
        node = self.head

        while node:
            if not node.next:
                terms.append(f"{str(node)}")
            else:
                terms.append(f"{str(node)} + ")
            node = node.next
        
        return "".join(terms)

def main():
    # read data from stdin (terminal/file) using input() and create polynomial p

    # read data from stdin (terminal/file) using input() and create polynomial q

    # get sum of p and q as a new linked list and print sum

    # get product of p and q as a new linked list and print product
    p = LinkedList()
    n = int(input())
    for _ in range(n):
        coeff, exp = map(int, input().split())
        p.insert_term(coeff, exp)

    input()
    q = LinkedList()
    m = int(input())
    for _ in range(m):
        coeff, exp = map(int, input().split())
        q.insert_term(coeff, exp)

    sumpq = p.add(q)
    print(sumpq)

    productpq = p.mult(q)
    print(productpq)

if __name__ == "__main__":
    main()
